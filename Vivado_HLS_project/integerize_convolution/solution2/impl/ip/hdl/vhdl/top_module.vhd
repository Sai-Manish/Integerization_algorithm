-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_module is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    kernel_V_ce0 : OUT STD_LOGIC;
    kernel_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    alpha_kernel : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of top_module is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top_module,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.429000,HLS_SYN_LAT=1491721,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=768,HLS_SYN_LUT=1180,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv7_7C : STD_LOGIC_VECTOR (6 downto 0) := "1111100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln16_fu_219_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln16_reg_529 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_229_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_537 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln32_fu_259_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln32_reg_542 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln11_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln17_fu_265_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln17_reg_547 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_fu_275_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_555 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_fu_287_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_563 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln215_fu_309_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln215_reg_568 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln20_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln22_fu_323_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln22_reg_573 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln32_fu_331_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln32_reg_578 : STD_LOGIC_VECTOR (14 downto 0);
    signal l_fu_342_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_reg_586 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln22_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_2_fu_376_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_reg_601 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_1_fu_382_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_load_reg_611 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal kernel_V_load_reg_616 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_516_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_626 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_V_1_fu_408_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_1_reg_631 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln339_fu_416_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_reg_636 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_reg_641 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1311_fu_430_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln1311_reg_647 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_123 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln13_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_reg_134 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal convolute_2_reg_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_0_reg_158 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_0_reg_168 : STD_LOGIC_VECTOR (2 downto 0);
    signal convolute_3_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_reg_191 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_0_reg_200 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln215_3_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_1_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_1_fu_235_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_2_fu_247_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln32_fu_243_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln32_1_fu_255_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_fu_297_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln215_fu_293_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln215_1_fu_305_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_315_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln32_2_fu_327_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln215_2_fu_348_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln215_1_fu_352_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_fu_362_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln26_fu_366_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_398_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_412_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_V_fu_436_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1311_fu_449_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_452_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_fu_462_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_445_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln1287_fu_466_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_fu_470_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_8_fu_482_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_476_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln662_fu_490_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_494_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_516_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_516_p10 : STD_LOGIC_VECTOR (11 downto 0);

    component top_module_fmul_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_module_sitofpcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_module_mac_mudEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    top_module_fmul_3bkb_U1 : component top_module_fmul_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_626,
        din1 => alpha_kernel,
        ce => ap_const_logic_1,
        dout => grp_fu_211_p2);

    top_module_sitofpcud_U2 : component top_module_sitofpcud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => convolute_2_reg_146,
        ce => ap_const_logic_1,
        dout => grp_fu_215_p1);

    top_module_mac_mudEe_U3 : component top_module_mac_mudEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => kernel_V_load_reg_616,
        din1 => grp_fu_516_p1,
        din2 => convolute_3_reg_179,
        dout => grp_fu_516_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    convolute_2_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                convolute_2_reg_146 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln22_fu_336_p2 = ap_const_lv1_1))) then 
                convolute_2_reg_146 <= convolute_3_reg_179;
            end if; 
        end if;
    end process;

    convolute_3_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                convolute_3_reg_179 <= convolute_2_reg_146;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                convolute_3_reg_179 <= grp_fu_516_p3;
            end if; 
        end if;
    end process;

    k_0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_168 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln22_fu_336_p2 = ap_const_lv1_1))) then 
                k_0_reg_168 <= k_reg_563;
            end if; 
        end if;
    end process;

    l_0_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                l_0_reg_200 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                l_0_reg_200 <= l_reg_586;
            end if; 
        end if;
    end process;

    x_0_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_0_reg_158 <= zext_ln16_reg_529;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln22_fu_336_p2 = ap_const_lv1_1))) then 
                x_0_reg_158 <= x_1_fu_382_p2;
            end if; 
        end if;
    end process;

    x_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_269_p2 = ap_const_lv1_1))) then 
                x_reg_123 <= i_reg_537;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_reg_123 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    y_1_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y_1_reg_191 <= zext_ln17_reg_547;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                y_1_reg_191 <= y_2_reg_601;
            end if; 
        end if;
    end process;

    y_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_223_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_reg_134 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                y_reg_134 <= j_reg_555;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln215_reg_568 <= add_ln215_fu_309_p2;
                    zext_ln22_reg_573(14 downto 7) <= zext_ln22_fu_323_p1(14 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_281_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln32_reg_578 <= add_ln32_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln339_reg_636 <= add_ln339_fu_416_p2;
                isNeg_reg_641 <= add_ln339_fu_416_p2(8 downto 8);
                sub_ln1311_reg_647 <= sub_ln1311_fu_430_p2;
                tmp_V_1_reg_631 <= tmp_V_1_fu_408_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_537 <= i_fu_229_p2;
                    zext_ln16_reg_529(6 downto 0) <= zext_ln16_fu_219_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                input_load_reg_611 <= input_r_q0;
                kernel_V_load_reg_616 <= kernel_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_555 <= j_fu_275_p2;
                    zext_ln17_reg_547(6 downto 0) <= zext_ln17_fu_265_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_reg_563 <= k_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                l_reg_586 <= l_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_223_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sub_ln32_reg_542(14 downto 2) <= sub_ln32_fu_259_p2(14 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_reg_626 <= grp_fu_215_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                y_2_reg_601 <= y_2_fu_376_p2;
            end if;
        end if;
    end process;
    zext_ln16_reg_529(7) <= '0';
    sub_ln32_reg_542(1 downto 0) <= "00";
    zext_ln17_reg_547(7) <= '0';
    zext_ln22_reg_573(6 downto 0) <= "0000000";
    zext_ln22_reg_573(15) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln11_fu_223_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln20_fu_281_p2, ap_CS_fsm_state5, icmp_ln22_fu_336_p2, icmp_ln13_fu_269_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln11_fu_223_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_269_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln20_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln22_fu_336_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln215_1_fu_352_p2 <= std_logic_vector(unsigned(add_ln215_reg_568) + unsigned(zext_ln215_2_fu_348_p1));
    add_ln215_fu_309_p2 <= std_logic_vector(unsigned(zext_ln215_fu_293_p1) + unsigned(zext_ln215_1_fu_305_p1));
    add_ln26_fu_366_p2 <= std_logic_vector(unsigned(zext_ln22_reg_573) + unsigned(zext_ln26_fu_362_p1));
    add_ln32_fu_331_p2 <= std_logic_vector(unsigned(zext_ln32_2_fu_327_p1) + unsigned(sub_ln32_reg_542));
    add_ln339_fu_416_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_412_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln11_fu_223_p2)
    begin
        if (((icmp_ln11_fu_223_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln11_fu_223_p2)
    begin
        if (((icmp_ln11_fu_223_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;
    grp_fu_516_p1 <= grp_fu_516_p10(8 - 1 downto 0);
    grp_fu_516_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_load_reg_611),12));
    i_fu_229_p2 <= std_logic_vector(unsigned(x_reg_123) + unsigned(ap_const_lv7_1));
    icmp_ln11_fu_223_p2 <= "1" when (x_reg_123 = ap_const_lv7_7C) else "0";
    icmp_ln13_fu_269_p2 <= "1" when (y_reg_134 = ap_const_lv7_7C) else "0";
    icmp_ln20_fu_281_p2 <= "1" when (k_0_reg_168 = ap_const_lv3_5) else "0";
    icmp_ln22_fu_336_p2 <= "1" when (l_0_reg_200 = ap_const_lv3_5) else "0";
    input_r_address0 <= zext_ln26_1_fu_371_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_275_p2 <= std_logic_vector(unsigned(y_reg_134) + unsigned(ap_const_lv7_1));
    k_fu_287_p2 <= std_logic_vector(unsigned(k_0_reg_168) + unsigned(ap_const_lv3_1));
    kernel_V_address0 <= zext_ln215_3_fu_357_p1(5 - 1 downto 0);

    kernel_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_V_ce0 <= ap_const_logic_1;
        else 
            kernel_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l_fu_342_p2 <= std_logic_vector(unsigned(l_0_reg_200) + unsigned(ap_const_lv3_1));
    mantissa_V_fu_436_p4 <= ((ap_const_lv1_1 & tmp_V_1_reg_631) & ap_const_lv1_0);
    output_r_address0 <= sext_ln32_fu_512_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= 
        zext_ln662_fu_490_p1 when (isNeg_reg_641(0) = '1') else 
        tmp_4_fu_494_p4;

    output_r_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_s_fu_394_p1 <= grp_fu_211_p2;
    r_V_1_fu_476_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_445_p1),to_integer(unsigned('0' & zext_ln1287_fu_466_p1(31-1 downto 0)))));
    r_V_fu_470_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_436_p4),to_integer(unsigned('0' & sext_ln1311_2_fu_462_p1(25-1 downto 0)))));
        sext_ln1311_1_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_452_p3),32));

        sext_ln1311_2_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_452_p3),25));

        sext_ln1311_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_reg_647),9));

        sext_ln32_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln32_reg_578),64));

    sub_ln1311_fu_430_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_398_p4));
    sub_ln32_fu_259_p2 <= std_logic_vector(unsigned(zext_ln32_fu_243_p1) - unsigned(zext_ln32_1_fu_255_p1));
    tmp_1_fu_235_p3 <= (x_reg_123 & ap_const_lv7_0);
    tmp_2_fu_247_p3 <= (x_reg_123 & ap_const_lv2_0);
    tmp_4_fu_494_p4 <= r_V_1_fu_476_p2(31 downto 24);
    tmp_5_fu_297_p3 <= (k_0_reg_168 & ap_const_lv2_0);
    tmp_6_fu_315_p3 <= (x_0_reg_158 & ap_const_lv7_0);
    tmp_8_fu_482_p3 <= r_V_fu_470_p2(24 downto 24);
    tmp_V_1_fu_408_p1 <= p_Val2_s_fu_394_p1(23 - 1 downto 0);
    tmp_V_fu_398_p4 <= p_Val2_s_fu_394_p1(30 downto 23);
    ush_fu_452_p3 <= 
        sext_ln1311_fu_449_p1 when (isNeg_reg_641(0) = '1') else 
        add_ln339_reg_636;
    x_1_fu_382_p2 <= std_logic_vector(unsigned(x_0_reg_158) + unsigned(ap_const_lv8_1));
    y_2_fu_376_p2 <= std_logic_vector(unsigned(y_1_reg_191) + unsigned(ap_const_lv8_1));
    zext_ln1287_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_458_p1),55));
    zext_ln16_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_123),8));
    zext_ln17_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_134),8));
    zext_ln215_1_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_297_p3),6));
    zext_ln215_2_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_0_reg_200),6));
    zext_ln215_3_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_1_fu_352_p2),64));
    zext_ln215_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_168),6));
    zext_ln22_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_315_p3),16));
    zext_ln26_1_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_366_p2),64));
    zext_ln26_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_1_reg_191),16));
    zext_ln32_1_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_247_p3),15));
    zext_ln32_2_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_134),15));
    zext_ln32_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_235_p3),15));
    zext_ln339_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_398_p4),9));
    zext_ln662_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_482_p3),8));
    zext_ln682_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_436_p4),55));
end behav;
